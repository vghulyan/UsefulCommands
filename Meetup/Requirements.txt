Document the how and what???

Front End
------------------------------------------------
If authorised then
    send a ping(user_id) to backend
    capture user's browser in the server, if valid token and browser is mobile
    then
        go to MAIN page
    else Login screen

Login Screen: email/password if success then go to MAIN page

Register Screen: Email/password
	on submit: display additional security field
		backend: Steps: Generate 6 digit security code and store in users table: tmpPassword
		Send email to the user with 6 digit extra security code to enter in security field
		On 10th failed attempt to enter security code:
			lock the account
			send an email to the user about the failed attempt and message: 1 hour your account is locked
			unlock the account after 1 hour and let to enter the 6 digit code again, if failed another 5 attempts then lock for 24 hours
			if total attempts is 20 then block the user
		On Success:
			set total_attempts=0
			set last_active=new Date()
			go to profile page and allow to enter additional info and upload users photo

Profile Page:
	Upload a photo
	Allergic: True/False (Checkbox)
	DoB: Date Picker
	City: Input field(Choose City/Country)
	Spoken Languages: (New Screen with list of languages options)
	Submit: On submit : 1. save the values in AsyncStorage and submit to backend
						2. Send email to CONTROLS.email_address

		Response:
			Fail: -> Reason (TABLE)
			Success: -> Save user records to USER table and redirect to the MAIN page


MAIN page: Display Card : flex: 1
			User Photo
			City
			Languages Spoken (flags)
			Distance

NavBar - Report a profile (PROFILE)

NavBar (Profile)
	Profile:
		Users main photo
		New Profiles (Non seen before : !PROFILES.not_seen table)
		All Profiles: PROFILES.all
		People Nearby: From near to max distance
		Search by Map: Map with dots(Numbers)
		MESSAGES: New Message & old Messages
		REQUESTS:
		Settings

SETTINGS page:
	Age range : (slider: 18-60+)
	HIDDEN PROFILES
	Support: chat text message to the GroupCreator
	Change Language
	Change Password
	Notifications: (AsyncStorage: Checkboxes: by default checked)
				Show message text (allow user to see message text)
				Messages (allow to see new Messages notification)
				Incorming requests: (allow for new incoming recuests)
				Approved requests: (to show approved requests)
				Photos: (allow to see photos)


SERVER
    Detect Browser,
    Mongo query: Relationship



API
-----------------------------------
POST - REGISTER A NEW USER: /api/user/register, {user}
POST - LOGOUT: /api/user/login, {user_id} // invalidate token
POST - LOGIN: /api/user/login, {email, password}
POST - UPLOAD_IMAGES: /api/user/upload_images, [...images]
POST - SEND_REQUEST: /api/user/send_request, {to_user_id}
POST - DELETE_AN_ACCOUNT: /api/user/delete_account, {user_id} set flag=false
POST - HIDE_A_PROFILE: /api/user/hide_profile, {the_user_id_to_hide}
POST - UN_HIDE_A_PROFILE: /api/user/un_hide_a_profile, {the_user_id_to_un_hide}
POST - GET_MESSAGES_BY_A_USER: /api/user/message_by_a_user_id, {by_user_id}
POST - SEARCH_PEOPLE_BY_AGE /api/user/search_by_age {age-range}
POST - SEND_MESSAGE_TO_A_USER /api/user/send_message_to_a_user, {to_user_id, message}
POST - [DISABLE_ENABLE]_AN_ACCOUNT /api/user/disable_the_accoun, {user_id} // on disable set message in notes - only GroupCreator can do


GET - GET_USERS_BY_ (filter by date)
        HIDDEN_PROFILES // who is hidden by whom
        LOCKED_ACCOUNT // How many accounts are locked - GroupCreator
        DELETED_ACCOUNTS // How many accounts are deleted (flags=false) - GroupCreator
        DISABLED_ACCOUNT // How many accounts are disabled - GroupCreator
        NEW_PROFILES // HOW MANY NEW PROFILES
        NEAR_BY_PROFILES // HOW MANY PROFILES NEAR BY
        SEARCH_BY_MAP // SEARCH USERS BY MAP
        ALL_USERS // HOW MANY TOTAL USERS
        HOW_MANY_MESSAGES_BEEN_POSTED_[TODAY, PER LAST WEEK, PER LAST MONTH, PER YEAR, PER DATE] - GroupCreator
        HOW_MANY_IPHONE_USERS - GroupCreator
        HOW_MANY_ANDROID_USERS - GroupCreator
        GET_AVERAGE_TIME_USER_SPEND - GroupCreator
        GET_AVERAGE_TIME_BY_USER {user_id} -> hh:mm:ss - GroupCreator
        GET_EMAIL_SEND_TO_GROUP_CREATOR - GroupCreator
        GET_LIST_OF_EMAILS_SEND_TO_GROUP_CREATOR - GroupCreator
        GET_TOTAL_NUMBER_OF_GROUP_CREATORS - GroupCreator



GET_USERS_BY_ID_
    ID
    EMAIL - GroupCreator
    ALERGIES
    DoB - GroupCreator
    AGE (YEAR) - GroupCreator
    CITY
    DATE_CREATED - GroupCreator
    REQUESTS_TO
    REQUEST_FROM
    MESSAGE_TO
    MESSAGES_FROM
    MESSAGE_READ_CONFIRMS
    COUNTRY
    SPOKEN_LANGUAGES
    HIDDEN_PROFILES
    LATITUDE - GroupCreator
    LONGITUDE - GroupCreator
    ALL_PICTURES - GroupCreator
    SEEN_PROFILES
    LIST_OF_REPORTED_PROFILES - GroupCreator
    REPORTED_PROFILES_FROM - GroupCreator
    REPORTED_PROFILES_TO
    MESSAGE_FROM_ID
    MESSAGE_FROM_DATE - GroupCreator
    MESSAGE_TO_ID
    MESSAGE_TO_PER_DATETIME - GroupCreator
    REQUEST_FROM_ID
    REQUEST_FROM_APPROVED(they have approved the user) - GroupCreator
    REQUEST_FROM_DATE(they have approved the user for a given date) - GroupCreator
    REQUEST_TO_ID
    REQEUST_TO_APPROVED(user has approved the requestor)
    REQUEST_TO_DATE(user has approved based on date) - GroupCreator
    LIST_OF_HIDDEN_IDS
    LIST_OF_HIDDEN_DATE - GroupCreator
    SEEN_PROFILES



GET_CONTROL_TABLE_DATA - GroupCreator

PUT - UPDATE THE USER: /api/user/update, {user}



DB
------------------------------------
USERS table:
	user_id,
	email,
	password,
	tmpPassword,
	Allergic := Enum['Yes' : 'No']
	DoB,
	City,
	Country,
	Latitude,
	Longitude,
	Spoken LANGUAGES,
	Main Photo (photo url),
	Photoes,
	date created,
	last updated,
	failed attempts (10),
	last failed attempt,
	last_active: Date,
	MESSAGE: (from other users)
	last_accessed_datetime
	disabled = false - GroupCreator
    notes: text - GroupCreator
	flag = false - GroupCreator

LANGUAGES
	Language
	flags

PROFILES:
	user_id,
	seen_profiles: [id1, id2, id3]
	reported_profiles: [id1, id2, id3]

MESSAGE
	user_id
	Messages from:
		id:
		message:
		date
	Message to:
		id
		message
		date

REQUESTS
	user_id
	Reqeust from:
		id
		Approved (yes, no)
		date
	Request to:
		id
		Apprvoed(yes, no)
		date

HIDDEN PROFILES
	user_id
	Hidden Profiles
		id:
		date:

STATISTICS
    user_id
    time_started_to_use (app opened)
    time_end_to_use (app closed)



CONTROLS
    Message_text_length
    Max_images_to_upload=3
    REASON (for rejecting the account)
	    Array: 	[
				{code: "Reason 1"},
				{code: "Reason 2"}
			]
    Total_iphone_users
    Total_android_users
    email: {
        email_address: abc@abc.com
        password: password
    }

GROUP_CREATOR (On creating a GROUP_CREATOR send emails to every GroupCreator)
    id
    email
    password
    date_created
    last_updated
